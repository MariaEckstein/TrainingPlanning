OPEN CLUSTER
- start NX client for Windows
- type in user name "maria" and pw ...

RUN A MATLAB SCRIPT
- Copy script and necessary files over using winSCP
- open a cmd and navigate to the folder of the matlab file x.mat
OR right-click in the right folder and select "open terminal here"
- type in the cmd "matlab -nodesktop -nojvm -nosplash -r x.mat"
- The cmd will become MATLAB after this command; type "quit" to return to the normal cmd (and type another command)

USE AN .SH SCRIPT TO RUN A FILE
- Write an .sh script ("runMAIN.sh"):
  - Simple test: "matlab -nodesktop -nodisplay -r 'a = 2 + 1'"
  - Script executing a Matlab file OUTSIDE of $HOME: "cd /home/bunge/maria/Desktop/TrainingPlanning && matlab -nodesktop -r MAIN"
  - Script executing a Matlab file IN $HOME: "matlab -nodesktop -r MAIN"
  - Notes:
    - NO header ("!#bin/sh" or "#!bin/bash!" or the like)!
    - CANNOT include "-nojvm" in the Matlab call if I want to use "parpool" to set n_workers in Matlab script
	- NO ".m" after the file name ("MAIN" instead of "MAIN.m")
- Put the script somewhere (e.g., into "$HOME" = "home/bunge/maria" or folder of Matlab scripts)
- Type "chmod +x ./runMAIN.sh" inside this folder to make the script executable
- type "./runMAIN.sh" (when in the same directory; otherwise "$HOME/runMAIN.sh") to run runMAIN

RUN A MATLAB SCRIPT IN PARALLEL USING PARPOOL
- On my own laptop / in my script:
  - Make sure I have the Matlab Parallel computing toolbox installed
  - Run "parpool(n_workers)" once (n_workers=2 on my old laptop); or start parallel processing by clicking on the lower left corner
  - For MultiStart, use "MultiStart('UseParallel', true)";
  - Make sure I'm NOT using global variables; not allowed in parallel processing
  - Hand over necessary parameters (such as data "Agent") directly to minimizer function ("computeNLL"): @(par)computeNLL(Agent, par) ("par" are to-be-estimated parameters)
  - Write a bash script runMAIN.sh that will start this matlab script on the cluster (see above)
- On the cluster
  - Put Matlab file into MATLABPATH or $HOME/matlab or anywhere else
  - Run runMAIN.sh from the command line: "qsub -pe threaded n_workers ./runMAIN.sh"
    - n_workers should be <= 8 to have a chance of being done
	- Instead of ./runMAIN.sh, I can also specify the full path, e.g., $HOME/runMAIN.sh

RUN SCRIPTS IN PARALLEL USING SGE
- Create an .sh script that loops over all files in directory:
  DATADIR="/home/bunge/maria/Desktop/TrainingPlanning/datafiles/d2016"
  DATASET="${SGE_TASK}"
  cd /home/bunge/maria/Desktop/TrainingPlanning && matlab -nodesktop -nosplash -r "fit_parameters_with_computeNLL('datafiles/d2016/$DATASET', 4)"
- Execute this .sh script on the cluster, using "submit"
  - Type in terminal: "submit -s ./rK72.sh -d ./datafiles/d2016"

MONITOR A PARALLEL PROCESS
- Check how much different clusters are working: "ssh nxX", where X is the number of the cluster (1-13)
- Check out how my jobs are doing: "top -u maria" ("q" to quit)
- Monitor parallel process: Type "qstat"
	- The state indicates what's going on: d(eletion), E(rror), h(old), r(unning),
	  R(estarted), s(uspended), t(ransfering), T(hreshold) or w(aiting).
	  - When the state just stays "qw" and never becomes "r", stop it
	  - To stop, type "qdel job-ID", where job-ID is found in the qstat output
	- When the state is "r", press F5 in the HOME folder (NOT the folder where runMAIN.sh is located)
	- Two files should appear: runMAIN.sh.eXXX and runMAIN.sh.oXXX; the first contains errors, the second Matlab output
	- runMAIN.sh.eXXX has an error about the bash that can be ignored
	- runMAIN.sh.oXXX shows whatever Matlab outputs when running MAIN.m
- When done, the script will produce its regular output in the folder where it is located (Press F5 if it's not there yet)

OPEN, EDIT, RUN AN R FILE
- Start R: type "R" in the cmd
- Evaluate R code in cmd: 'Rscript -e "4+4"'
- Open R file when R is open in the cmd: type "file.edit filename.R"
- Run R file when R is open in the cmd: ???
- Run R file directly from cmd: type "Rscript filename.R"

INSTALL R PACKAGES
- install.packages('plyr', dependencies=TRUE, repos='http://cran.rstudio.com/')
- install.packages('reshape', dependencies=TRUE, repos='http://cran.rstudio.com/')

START JUPYTER (on the laptop)
- Open anaconda command prompt or Git Bash
- Type "jupyter notebook"
- Navigate to the notebook you want to open!

START JUPYTER (on the cluster)
- open "Terminal Emulator" (cmd) in NX
- type jupyter notebook --port 9999 --no-browser --ip=*
- open git bash on my computer
- type ssh -L 9999:nx4:9999 maria@ssh.neuro.berkeley.edu
  (replace nx4 with whatever is says at the top of the cluster terminal in NX)
- open chrome and type http://localhost:9999

UPLOAD DATA
- open WinSCP
- open maria@ftp.neuro.berkeley.edu session
- drag and drop the data over!

IN CASE KERAS COMPLAINS THAT IT CAN'T FIND POOL
- dowload theano-0.8.2, e.g. from https://pypi.python.org/pypi/Theano
- unzip somewhere on the cluster (e.g., onto the desktop)
- navigate into the Theano-0.8.2 folder created by unzipping
- open terminal there and run: python setup.py install

WHEN THE NOTEBOOK COMPLAINS THAT IT IS MISSING A PACKAGE (EVEN AFTER I INSTALLED IT)
- Check if jupyter is using py27 or py3 (shown in the right top corner of the notebook when opened in the browser)
- In Anaconda, find out what environements there are ("conda info --envs")
- Pick the one that jupyter is using ("activate py27")
- Install the missing package here ("conda install matplotlib")
- (If "conda install x" does not work, try "pip install x")
